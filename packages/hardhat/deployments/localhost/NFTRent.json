{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "BorrowerVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "LendingStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "NFTRent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "DailyRentPrice",
          "type": "uint256"
        }
      ],
      "name": "QuoteAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_NftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_dailyRentPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_repayInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "QuoteProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "NFTRent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "DailyRentPrice",
          "type": "uint256"
        }
      ],
      "name": "QuoteRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rentDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_dailyRentalPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "QuoteReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rentDuration",
          "type": "uint256"
        }
      ],
      "name": "QuoteRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "NFTRent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "NFTRentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum NFTRentStorage.NFTRentLineStatus",
          "name": "currentStatus",
          "type": "uint8"
        }
      ],
      "name": "RentActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "NFTRent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "NFTRentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum NFTRentStorage.NFTRentLineStatus",
          "name": "currentStatus",
          "type": "uint8"
        }
      ],
      "name": "RentCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "NFTRent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "NFTRentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum NFTRentStorage.NFTRentLineStatus",
          "name": "currentStatus",
          "type": "uint8"
        }
      ],
      "name": "RentClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "NFTRent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "NFTRentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum NFTRentStorage.NFTRentLineStatus",
          "name": "currentStatus",
          "type": "uint8"
        }
      ],
      "name": "RentDefaulted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "NFTRent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "NFTRentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum NFTRentStorage.NFTRentLineStatus",
          "name": "currentStatus",
          "type": "uint8"
        }
      ],
      "name": "RentRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaymentsLeft",
          "type": "uint256"
        }
      ],
      "name": "Repaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "VerifierAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "VerifierRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "AcceptQuote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "ClaimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "ClaimStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rentDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dailyRentalPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_repayInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "CustomQuote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "GetStakeBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFTRentLineCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "NFTRentLineInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rentalPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "NftAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "NftId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "internalType": "enum NFTRentStorage.NFTRentLineStatus",
          "name": "currentStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "NFTRentLineUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "repayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repaymentInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repaymentsCompleted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rentalPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRepaymentTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NFTtoHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dailyRentalPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "RejectQuote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "Rent",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "SendNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "VerifiedBorrowers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "addExpert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "claimDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "expertData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expertFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expertStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dailyRentPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_repayInterval",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_toescrow",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_towallet",
          "type": "bool"
        }
      ],
      "name": "provideQuote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quoteVarsInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "NFTRent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "NFTId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "NFTOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxRentalDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dailyRentalPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayInterval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "expert",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        },
        {
          "internalType": "enum NFTRentStorage.QuoteStatus",
          "name": "quoteStatus",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "Toescrow",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "Towallet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "removeExpert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayInterest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rentDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        }
      ],
      "name": "requestQuote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rentNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "stopLending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verification",
      "outputs": [
        {
          "internalType": "contract IVerification",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "verifyBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yearInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2bc6dd96841ccf2a04e166204fb07298a986bd3e8ba1f5e0cb82fc0e4312f8fc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "3887451",
    "logsBloom": "0x
    "blockHash": "0x638f40fe49cd89d1cd68dd442f2928292df03bfa08034ecf9db3006079d5a096",
    "transactionHash": "0x2bc6dd96841ccf2a04e166204fb07298a986bd3e8ba1f5e0cb82fc0e4312f8fc",
    "logs": [],
    "blockNumber": 30,
    "cumulativeGasUsed": "3887451",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a765f9f8956b4f2285b9b49e4752fd8b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.7+commit.b8d736ae\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"BorrowerVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"LendingStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTRent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DailyRentPrice\",\"type\":\"uint256\"}],\"name\":\"QuoteAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_NftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dailyRentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_repayInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"QuoteProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTRent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DailyRentPrice\",\"type\":\"uint256\"}],\"name\":\"QuoteRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rentDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dailyRentalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"QuoteReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rentDuration\",\"type\":\"uint256\"}],\"name\":\"QuoteRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTRent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"NFTRentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum NFTRentStorage.NFTRentLineStatus\",\"name\":\"currentStatus\",\"type\":\"uint8\"}],\"name\":\"RentActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTRent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"NFTRentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum NFTRentStorage.NFTRentLineStatus\",\"name\":\"currentStatus\",\"type\":\"uint8\"}],\"name\":\"RentCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTRent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"NFTRentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum NFTRentStorage.NFTRentLineStatus\",\"name\":\"currentStatus\",\"type\":\"uint8\"}],\"name\":\"RentClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTRent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"NFTRentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum NFTRentStorage.NFTRentLineStatus\",\"name\":\"currentStatus\",\"type\":\"uint8\"}],\"name\":\"RentDefaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTRent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"NFTRentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum NFTRentStorage.NFTRentLineStatus\",\"name\":\"currentStatus\",\"type\":\"uint8\"}],\"name\":\"RentRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaymentsLeft\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"VerifierAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"VerifierRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"AcceptQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"ClaimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"ClaimStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rentDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dailyRentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"CustomQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"GetStakeBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTRentLineCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"NFTRentLineInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"NftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"enum NFTRentStorage.NFTRentLineStatus\",\"name\":\"currentStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"NFTRentLineUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repayments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentsCompleted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTtoHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyRentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"RejectQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"Rent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"SendNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"VerifiedBorrowers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"addExpert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"claimDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"expertData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expertFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expertStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyRentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_toescrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_towallet\",\"type\":\"bool\"}],\"name\":\"provideQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quoteVarsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"NFTRent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NFTOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxRentalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayInterval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"expert\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"},{\"internalType\":\"enum NFTRentStorage.QuoteStatus\",\"name\":\"quoteStatus\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"Toescrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Towallet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"removeExpert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayInterest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rentDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"}],\"name\":\"requestQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rentNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"stopLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verification\",\"outputs\":[{\"internalType\":\"contract IVerification\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"verifyBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/NFTRent.sol\":\"NFTRent\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x118ed7540f56b21ff92e21ebaa73584048e98d2ac04ca67571329bb8dbd9032f\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x4b087f06b6670a131a5a14e53b1d2a5ef19c034cc5ec42eeebcf9554325744ad\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa1e12f97981f1d0964b1c048978606a57127c56c438bab61cdfe269cad859a74\"},\"contracts/IVerification.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IVerification {\\n    function isUser(address _user, address _verifier) external view returns (bool);\\n\\n    function registerMasterAddress(address _masterAddress, bool _isMasterLinked) external;\\n\\n    function unregisterMasterAddress(address _masterAddress, address _verifier) external;\\n\\n    function addVerifier(address _verifier) external;\\n\\n    function removeVerifier(address _verifier) external;\\n}\",\"keccak256\":\"0xfd84d55f7eb244b6f15a39633f6e560c9872ee467650aa2edd81e9faae8d36b1\"},\"contracts/NFTRent.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./IVerification.sol\\\";\\nimport \\\"./NFTRentStorage.sol\\\";\\n// import './expertOnboard.sol';\\n\\ncontract NFTRent is Initializable, OwnableUpgradeable, NFTRentStorage {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    IVerification public verification;\\n\\n    mapping(address => string) public expertData;\\n    mapping(address => mapping(uint256 => bool)) public quotes;\\n    mapping(address => mapping(uint256 => bytes32)) public NFTtoHash;\\n    mapping(address => bool) public VerifiedBorrowers;\\n\\n    modifier OnlyExpert(address _expert) {\\n        require(bytes(expertData[_expert]).length != 0, 'The Expert alone can access this function');\\n        _;\\n    }\\n\\n    modifier ifNFTRentLineExists(bytes32 NFTRentLineHash) {\\n        require(NFTRentLineInfo[NFTRentLineHash].currentStatus != NFTRentLineStatus.NOT_CREATED, 'NFTRent Line does not exist');\\n        _;\\n    }\\n\\n    modifier onlyNFTRentLineBorrower(bytes32 NFTRentLineHash) {\\n        require(NFTRentLineInfo[NFTRentLineHash].borrower == msg.sender, 'Only NFTRent line Borrower can access');\\n        _;\\n    }\\n\\n    modifier onlyNFTRentLineLender(bytes32 NFTRentLineHash) {\\n        require(NFTRentLineInfo[NFTRentLineHash].lender == msg.sender, 'Only NFTRent line Lender can access');\\n        _;\\n    }\\n\\n    // Add events here to get the updates on the requested quotes made by the lender\\n    event QuoteRequested(string _name, address _rentNft,uint256 _nftId, address _collateralAsset, uint256 _rentDuration);\\n    event QuoteReleased(string _name, address _rentNft,uint256 _nftId, address _collateralAsset, uint256 _rentDuration, uint256 _dailyRentalPrice, uint256 _collateralAmount);\\n    event QuoteAccepted(address NFTRent, uint256 DailyRentPrice);\\n    event QuoteRejected(address NFTRent, uint256 DailyRentPrice);\\n    event RentRequested(address NFTRent, bytes32 NFTRentHash, NFTRentLineStatus currentStatus);\\n    event RentActive(address NFTRent, bytes32 NFTRentHash, NFTRentLineStatus currentStatus);\\n    event RentClosed(address NFTRent, bytes32 NFTRentHash, NFTRentLineStatus currentStatus);\\n    event RentCancelled(address NFTRent, bytes32 NFTRentHash,  NFTRentLineStatus currentStatus);\\n    event RentDefaulted(address NFTRent, bytes32 NFTRentHash,  NFTRentLineStatus currentStatus);\\n    event Repaid(address _rentNft, uint256 repaymentsLeft);\\n    event LendingStopped(address _rentNft, uint256 _nftId);\\n    event QuoteProvided(address _rentNft, uint256 _NftId, uint256 _dailyRentPrice, uint256 _repayInterval, uint256 _collateralAmount);\\n    event BorrowerVerified(address _borrower);\\n    event VerifierAdded(address verifier, string metadata);\\n    event VerifierRemoved(address verifier);\\n\\n    // function initialize(address _admin, address _verification) public initializer {\\n    //     super.__Ownable_init();\\n    //     super.transferOwnership(_admin);\\n    //     verification = IVerification(_verification);\\n    // }\\n\\n    function addExpert(address _verifier, string calldata _metadata) external {\\n        require(bytes(expertData[_verifier]).length == 0, 'AddExpert: Verifier already exists');\\n        // verification.addVerifier(_verifier);\\n        // verification.registerMasterAddress(_verifier, true);\\n        expertData[_verifier] = _metadata;\\n        emit VerifierAdded(_verifier, _metadata);\\n    }\\n\\n    function removeExpert(address _verifier) external {\\n        require(bytes(expertData[_verifier]).length != 0, 'AddExpert: Verifier does not exists');\\n        delete expertData[_verifier];\\n        // verification.unregisterMasterAddress(_verifier, address(this));\\n        // verification.removeVerifier(_verifier);\\n        emit VerifierRemoved(_verifier);\\n    }\\n\\n    function requestQuote(\\n        address _rentNft,\\n        uint256 _nftId,\\n        uint256 _rentDuration,\\n        address _collateralAsset\\n    ) external {\\n        require(_rentNft != address(0), 'Invalid NFT address');\\n        require(!quotes[_rentNft][_nftId], 'The quote already exists');\\n        address Owner = ERC721(_rentNft).ownerOf(_nftId);\\n        require(msg.sender == Owner, 'Lender not the correct owner');\\n        quoteVarsInfo[_rentNft][_nftId].NFTRent = _rentNft;\\n        quoteVarsInfo[_rentNft][_nftId].NFTId = _nftId;\\n        quoteVarsInfo[_rentNft][_nftId].NFTOwner = msg.sender;\\n        quoteVarsInfo[_rentNft][_nftId].maxRentalDuration = _rentDuration;\\n        quoteVarsInfo[_rentNft][_nftId].collateralAsset = _collateralAsset;\\n        quoteVarsInfo[_rentNft][_nftId].expert = address(0);\\n        quoteVarsInfo[_rentNft][_nftId].verified = false;\\n        quoteVarsInfo[_rentNft][_nftId].quoteStatus = QuoteStatus.REQUESTED;\\n        quotes[_rentNft][_nftId] = true;\\n        // ERC721(_rentNft).name();\\n        emit QuoteRequested(ERC721(_rentNft).name(),_rentNft,_nftId,_collateralAsset,_rentDuration);\\n    }\\n\\n    function CustomQuote(\\n        address _rentNft,\\n        uint256 _nftId,\\n        uint256 _rentDuration,\\n        address _collateralAsset,\\n        uint256 _dailyRentalPrice,\\n        uint256 _repayInterval,\\n        uint256 _collateralAmount\\n    ) external {\\n        require(_rentNft != address(0), 'Invalid NFT address');\\n        require(!quotes[_rentNft][_nftId], 'The quote already exists');\\n        quoteVarsInfo[_rentNft][_nftId].NFTRent = _rentNft;\\n        quoteVarsInfo[_rentNft][_nftId].NFTId = _nftId;\\n        quoteVarsInfo[_rentNft][_nftId].NFTOwner = msg.sender;\\n        quoteVarsInfo[_rentNft][_nftId].maxRentalDuration = _rentDuration;\\n        quoteVarsInfo[_rentNft][_nftId].dailyRentalPrice = _dailyRentalPrice;\\n        quoteVarsInfo[_rentNft][_nftId].repayInterval = _repayInterval;\\n        quoteVarsInfo[_rentNft][_nftId].collateralAsset = _collateralAsset;\\n        quoteVarsInfo[_rentNft][_nftId].collateralAmount = _collateralAmount;\\n        quoteVarsInfo[_rentNft][_nftId].expert = address(0);\\n        quoteVarsInfo[_rentNft][_nftId].verified = false;\\n        quoteVarsInfo[_rentNft][_nftId].quoteStatus = QuoteStatus.FIXED;\\n        quoteVarsInfo[_rentNft][_nftId].Toescrow = false;\\n        quoteVarsInfo[_rentNft][_nftId].Towallet = true;\\n        quotes[_rentNft][_nftId] = true;\\n        emit QuoteReleased(ERC721(_rentNft).name(),_rentNft,_nftId,_collateralAsset,_rentDuration,_dailyRentalPrice,_collateralAmount);\\n    }\\n\\n    function AcceptQuote(address _rentNft, uint256 _nftId) external {\\n        require(quotes[_rentNft][_nftId], 'The quote does not exists');\\n        require(quoteVarsInfo[_rentNft][_nftId].NFTOwner == msg.sender, 'Only lender can accept quote');\\n        require(quoteVarsInfo[_rentNft][_nftId].expert != address(0), 'Expert has not given the quote');\\n        quoteVarsInfo[_rentNft][_nftId].quoteStatus = QuoteStatus.ACCEPTED;\\n        quoteVarsInfo[_rentNft][_nftId].verified = true;\\n        emit QuoteAccepted(_rentNft, quoteVarsInfo[_rentNft][_nftId].dailyRentalPrice);\\n    }\\n\\n    function RejectQuote(\\n        address _rentNft,\\n        uint256 _nftId,\\n        uint256 _dailyRentalPrice,\\n        uint256 _collateralAmount\\n    ) external {\\n        require(quotes[_rentNft][_nftId], 'The quote does not exists');\\n        require(quoteVarsInfo[_rentNft][_nftId].NFTOwner == msg.sender, 'Only lender can accept quote');\\n        require(quoteVarsInfo[_rentNft][_nftId].expert != address(0), 'Expert has not given the quote');\\n        quoteVarsInfo[_rentNft][_nftId].dailyRentalPrice = _dailyRentalPrice;\\n        quoteVarsInfo[_rentNft][_nftId].collateralAmount = _collateralAmount;\\n        quoteVarsInfo[_rentNft][_nftId].quoteStatus = QuoteStatus.REJECTED;\\n        quoteVarsInfo[_rentNft][_nftId].verified = false;\\n        emit QuoteRejected(_rentNft, quoteVarsInfo[_rentNft][_nftId].dailyRentalPrice);\\n    }\\n\\n    function stopLending(address _rentNft, uint256 _nftId) external {\\n        require(bytes32(NFTtoHash[_rentNft][_nftId]).length == 0, 'The requested NFT in currently rented');\\n        require(quotes[_rentNft][_nftId], 'The quote does not exist');\\n        require(quoteVarsInfo[_rentNft][_nftId].NFTOwner == msg.sender, 'Only lender can stop lending');\\n        delete quoteVarsInfo[_rentNft][_nftId];\\n        quotes[_rentNft][_nftId] = false;\\n        emit LendingStopped(_rentNft, _nftId);\\n    }\\n\\n    function Rent(address _rentNft, uint256 _nftId) external payable {\\n        // require(bytes32(NFTtoHash[_rentNft][_nftId]).length == 0, 'The requested NFT is alreay rented');\\n        require(quoteVarsInfo[_rentNft][_nftId].quoteStatus != QuoteStatus.REQUESTED, 'The quote has not been received yet');\\n        require(quoteVarsInfo[_rentNft][_nftId].NFTOwner != msg.sender, 'Lender and borrower cannot be the same');\\n        NFTRentLineCounter = NFTRentLineCounter + 1;\\n        bytes32 NFTRentLineHash = keccak256(abi.encodePacked(NFTRentLineCounter));\\n        NFTtoHash[_rentNft][_nftId] = NFTRentLineHash;\\n        NFTRentLineInfo[NFTRentLineHash].exists = true;\\n        NFTRentLineInfo[NFTRentLineHash].currentStatus = NFTRentLineStatus.NOT_CREATED;\\n        NFTRentLineInfo[NFTRentLineHash].borrower = msg.sender;\\n        NFTRentLineInfo[NFTRentLineHash].lender = quoteVarsInfo[_rentNft][_nftId].NFTOwner;\\n        NFTRentLineInfo[NFTRentLineHash].rentalPrice = quoteVarsInfo[_rentNft][_nftId].dailyRentalPrice;\\n        NFTRentLineInfo[NFTRentLineHash].NftAsset = _rentNft;\\n        NFTRentLineInfo[NFTRentLineHash].NftId = _nftId;\\n        NFTRentLineInfo[NFTRentLineHash].collateralAsset = quoteVarsInfo[_rentNft][_nftId].collateralAsset;\\n\\n        uint256 maxRentalDuration = quoteVarsInfo[_rentNft][_nftId].maxRentalDuration;\\n        uint256 repayInterval = quoteVarsInfo[_rentNft][_nftId].repayInterval;\\n        NFTRentLineUsage[NFTRentLineHash].repayments = maxRentalDuration.div(repayInterval);\\n        NFTRentLineUsage[NFTRentLineHash].repaymentInterval = repayInterval;\\n        NFTRentLineUsage[NFTRentLineHash].withdrawInterval = 1 days;\\n        NFTRentLineUsage[NFTRentLineHash].repaymentsCompleted = maxRentalDuration.div(repayInterval);\\n        NFTRentLineUsage[NFTRentLineHash]._rentalPrice = quoteVarsInfo[_rentNft][_nftId].dailyRentalPrice;\\n\\n        uint256 collateralAmount = quoteVarsInfo[_rentNft][_nftId].collateralAmount;\\n        require(msg.value == collateralAmount, 'Please deposit correct amount of collateral');\\n        depositCollateral(_rentNft, _nftId, collateralAmount);\\n        NFTRentLineUsage[NFTRentLineHash].loanStartTime = block.timestamp;\\n        NFTRentLineUsage[NFTRentLineHash].lastRepaymentTime = block.timestamp;\\n        NFTRentLineInfo[NFTRentLineHash].currentStatus = NFTRentLineStatus.REQUESTED;\\n\\n        emit RentRequested(_rentNft, NFTRentLineHash, NFTRentLineInfo[NFTRentLineHash].currentStatus);\\n    }\\n\\n    function depositCollateral(\\n        address _rentNft,\\n        uint256 _nftId,\\n        uint256 _amount\\n    ) internal {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        require(NFTRentLineInfo[NFTRentLineHash].exists, 'The NFT rent is not yet requested');\\n        address _collateralAsset = NFTRentLineInfo[NFTRentLineHash].collateralAsset;\\n        // Commenting for demo purposes\\n        // IERC20(_collateralAsset).safeTransferFrom(msg.sender, address(this), _amount);\\n        msg.sender.transfer(_amount);\\n    }\\n\\n    function calculateInterest(address _rentNft, uint256 _nftId) internal view returns (uint256 Interest) {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        uint256 dailyRent = NFTRentLineUsage[NFTRentLineHash]._rentalPrice;\\n        uint256 repayInterval = NFTRentLineUsage[NFTRentLineHash].repaymentInterval;\\n        Interest = dailyRent * repayInterval;\\n    }\\n\\n    function SendNft(address _rentNft, uint256 _nftId) external payable onlyNFTRentLineLender(NFTtoHash[_rentNft][_nftId]) {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        require(NFTRentLineInfo[NFTRentLineHash].exists, 'The NFT rent is not yet requested');\\n        require(NFTRentLineInfo[NFTRentLineHash].currentStatus == NFTRentLineStatus.REQUESTED, 'The Rent has not been requested yet.');\\n        uint256 _currentTime = block.timestamp;\\n        uint256 _loanStartTime = NFTRentLineUsage[NFTRentLineHash].loanStartTime;\\n        uint256 _withdrawInterval = NFTRentLineUsage[NFTRentLineHash].withdrawInterval;\\n        if (_currentTime <= _loanStartTime.add(_withdrawInterval)) {\\n            if (quoteVarsInfo[_rentNft][_nftId].Towallet == true) {\\n                address to = payable(NFTRentLineInfo[NFTRentLineHash].borrower);\\n                uint256 tokenId = quoteVarsInfo[_rentNft][_nftId].NFTId;\\n                IERC721(_rentNft).safeTransferFrom(msg.sender, to, tokenId);\\n            }\\n            NFTRentLineInfo[NFTRentLineHash].currentStatus = NFTRentLineStatus.ACTIVE;\\n            NFTRentLineUsage[NFTRentLineHash].lastRepaymentTime = block.timestamp;\\n            emit RentActive(_rentNft, NFTRentLineHash, NFTRentLineInfo[NFTRentLineHash].currentStatus);\\n        } else {\\n            NFTRentLineInfo[NFTRentLineHash].currentStatus = NFTRentLineStatus.CANCELLED;\\n            emit RentCancelled(_rentNft, NFTRentLineHash, NFTRentLineInfo[NFTRentLineHash].currentStatus);\\n        }\\n    }\\n\\n    function ClaimCollateral(address _rentNft, uint256 _nftId) external onlyNFTRentLineBorrower(NFTtoHash[_rentNft][_nftId]) {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        require(NFTRentLineInfo[NFTRentLineHash].exists, 'The NFT rent is not yet requested');\\n        require(NFTRentLineInfo[NFTRentLineHash].currentStatus == NFTRentLineStatus.CANCELLED, 'The Rent has not been cancelled yet.');\\n        uint256 _collateralAmount = quoteVarsInfo[_rentNft][_nftId].collateralAmount;\\n        _claimCollateral(_rentNft, _nftId, _collateralAmount);\\n    }\\n\\n    function _claimCollateral(\\n        address _rentNft,\\n        uint256 _nftId,\\n        uint256 _collateralAmount\\n    ) internal {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        address _collateralAsset = NFTRentLineInfo[NFTRentLineHash].collateralAsset;\\n        IERC20(_collateralAsset).safeTransferFrom(address(this), msg.sender, _collateralAmount);\\n    }\\n\\n    function RepayNft(address _rentNft, uint256 _nftId) internal {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        require(NFTRentLineInfo[NFTRentLineHash].exists, 'The NFT rent is not yet requested');\\n        require(NFTRentLineUsage[NFTRentLineHash].repaymentsCompleted == 0, 'Please complete remaining repayments first');\\n        if (quoteVarsInfo[_rentNft][_nftId].Towallet == true) {\\n            address to = payable(NFTRentLineInfo[NFTRentLineHash].lender);\\n            uint256 tokenId = quoteVarsInfo[_rentNft][_nftId].NFTId;\\n            IERC721(_rentNft).safeTransferFrom(msg.sender, to, tokenId);\\n        }\\n        NFTRentLineInfo[NFTRentLineHash].currentStatus = NFTRentLineStatus.CLOSED;\\n        emit RentClosed(_rentNft, NFTRentLineHash, NFTRentLineInfo[NFTRentLineHash].currentStatus);\\n    }\\n\\n    function repayInterest(\\n        address _rentNft,\\n        uint256 _nftId,\\n        uint256 _amount\\n    ) external payable onlyNFTRentLineBorrower(NFTtoHash[_rentNft][_nftId]) {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        require(NFTRentLineInfo[NFTRentLineHash].exists, 'The NFT rent is not yet requested');\\n        require(NFTRentLineUsage[NFTRentLineHash].repaymentsCompleted >= 1, 'All repayments are done');\\n        require(NFTRentLineInfo[NFTRentLineHash].currentStatus == NFTRentLineStatus.ACTIVE, 'Renting has not begun yet');\\n        uint256 Interest = calculateInterest(_rentNft, _nftId);\\n        require(Interest == _amount, 'Insufficient amount');\\n        uint256 _currentTime = block.timestamp;\\n        uint256 _lastRepaymentTime = NFTRentLineUsage[NFTRentLineHash].lastRepaymentTime;\\n        uint256 _repaymentInterval = NFTRentLineUsage[NFTRentLineHash].repaymentInterval;\\n        if (_currentTime <= _lastRepaymentTime.add(_repaymentInterval)) {\\n            if (NFTRentLineUsage[NFTRentLineHash].repaymentsCompleted == 1) {\\n                _repay(_rentNft, _nftId, _amount);\\n                RepayNft(_rentNft, _nftId);\\n            } else {\\n                _repay(_rentNft, _nftId, _amount);\\n            }\\n            NFTRentLineUsage[NFTRentLineHash].repaymentsCompleted = NFTRentLineUsage[NFTRentLineHash].repaymentsCompleted - 1;\\n            NFTRentLineUsage[NFTRentLineHash].lastRepaymentTime = block.timestamp;\\n            emit Repaid(_rentNft, NFTRentLineUsage[NFTRentLineHash].repaymentsCompleted);\\n        } else {\\n            NFTRentLineInfo[NFTRentLineHash].currentStatus == NFTRentLineStatus.DEFAULTED;\\n            emit RentDefaulted(_rentNft, NFTRentLineHash, NFTRentLineInfo[NFTRentLineHash].currentStatus);\\n        }\\n    }\\n\\n    function _repay(\\n        address _rentNft,\\n        uint256 _nftId,\\n        uint256 _amount\\n    ) internal {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        address _collateralAsset = NFTRentLineInfo[NFTRentLineHash].collateralAsset;\\n        address _expert = quoteVarsInfo[_rentNft][_nftId].expert;\\n        if (quoteVarsInfo[_rentNft][_nftId].verified == true) {\\n            uint256 fees = _amount.mul(expertFee).div(10**30);\\n            uint256 payment = _amount.sub(fees);\\n            IERC20(_collateralAsset).safeTransferFrom(msg.sender, address(this), payment);\\n            IERC20(_collateralAsset).safeTransferFrom(msg.sender, _expert, fees);\\n        } else {\\n            IERC20(_collateralAsset).safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n    }\\n\\n    function liquidateStake(address _rentNft, uint256 _nftId) internal view returns (uint256 stake) {\\n        require(bytes32(NFTtoHash[_rentNft][_nftId]).length != 0, 'The NFT is not rented');\\n        stake = quoteVarsInfo[_rentNft][_nftId].collateralAmount.mul(expertStake).div(10**30);\\n    }\\n\\n    function claimDeposit(address _rentNft, uint256 _nftId) external onlyNFTRentLineLender(NFTtoHash[_rentNft][_nftId]) {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        require(NFTRentLineInfo[NFTRentLineHash].exists, 'The NFT rent is not yet requested');\\n        require(NFTRentLineInfo[NFTRentLineHash].currentStatus == NFTRentLineStatus.DEFAULTED, 'The rent is not defaulted yet.');\\n        address asset = NFTRentLineInfo[NFTRentLineHash].collateralAsset;\\n        uint256 repaymentsDone = NFTRentLineUsage[NFTRentLineHash].repaymentsCompleted;\\n        uint256 TotalRepayments = NFTRentLineUsage[NFTRentLineHash].repayments;\\n        uint256 remainder = TotalRepayments.sub(repaymentsDone);\\n        uint256 _repaymentAmount = calculateInterest(_rentNft, _nftId);\\n\\n        uint256 repaymentClaim = _repaymentAmount.mul(remainder);\\n        uint256 totalClaim = quoteVarsInfo[_rentNft][_nftId].collateralAmount.add(repaymentClaim);\\n\\n        if (quoteVarsInfo[_rentNft][_nftId].verified == true) {\\n            uint256 _fees = (_repaymentAmount.mul(expertFee).div(10**30)).mul(remainder);\\n            uint256 stake = liquidateStake(_rentNft, _nftId);\\n            totalClaim = totalClaim.add(stake).sub(_fees);\\n        }\\n        IERC20(asset).safeTransferFrom(address(this), msg.sender, totalClaim);\\n    }\\n\\n    function verifyBorrower(address _borrower) external OnlyExpert(msg.sender) {\\n        require(!VerifiedBorrowers[_borrower], 'The borrower is already verified');\\n        // _verifyBorrower(_borrower);\\n        VerifiedBorrowers[_borrower] = true;\\n        emit BorrowerVerified(_borrower);\\n    }\\n\\n    function provideQuote(\\n        address _rentNft,\\n        uint256 _nftId,\\n        uint256 _dailyRentPrice,\\n        uint256 _collateralAmount,\\n        uint256 _repayInterval,\\n        bool _toescrow,\\n        bool _towallet\\n    ) external OnlyExpert(msg.sender) {\\n        require(_rentNft != address(0), 'Invalid NFT address');\\n        require(quotes[_rentNft][_nftId], 'The quote does not exist');\\n        require(quoteVarsInfo[_rentNft][_nftId].quoteStatus == QuoteStatus.REQUESTED,'The quote value exists');\\n        require(_toescrow != _towallet, 'Both escrow and wallet cannot be set to same value');\\n        quoteVarsInfo[_rentNft][_nftId].expert = msg.sender;\\n        quoteVarsInfo[_rentNft][_nftId].verified = true;\\n        quoteVarsInfo[_rentNft][_nftId].dailyRentalPrice = _dailyRentPrice;\\n        quoteVarsInfo[_rentNft][_nftId].collateralAmount = _collateralAmount;\\n        quoteVarsInfo[_rentNft][_nftId].repayInterval = _repayInterval;\\n        quoteVarsInfo[_rentNft][_nftId].Toescrow = _toescrow;\\n        quoteVarsInfo[_rentNft][_nftId].Towallet = _towallet;\\n        emit QuoteProvided(_rentNft, _nftId, _dailyRentPrice, _repayInterval, _collateralAmount);\\n    }\\n\\n    function Stake(\\n        address _rentNft,\\n        uint256 _nftId,\\n        uint256 _amount\\n    ) external payable OnlyExpert(msg.sender) {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        require(NFTRentLineInfo[NFTRentLineHash].exists, 'The NFT rent line does not exist');\\n        require(NFTRentLineInfo[NFTRentLineHash].currentStatus == NFTRentLineStatus.REQUESTED, 'Rent not requested');\\n        uint256 stake = quoteVarsInfo[_rentNft][_nftId].collateralAmount.mul(expertStake).div(10**30);\\n        if (quoteVarsInfo[_rentNft][_nftId].verified == true) {\\n            require(stake == _amount, 'The amount provided is not correct');\\n            depositCollateral(_rentNft, _nftId, _amount);\\n        }\\n    }\\n\\n    function ClaimStake(address _rentNft, uint256 _nftId) external OnlyExpert(msg.sender) {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        require(NFTRentLineInfo[NFTRentLineHash].exists, 'The NFT rent line does not exist');\\n        require(NFTRentLineInfo[NFTRentLineHash].currentStatus == NFTRentLineStatus.CANCELLED, 'Rent not cancelled');\\n        uint256 stake = quoteVarsInfo[_rentNft][_nftId].collateralAmount.mul(expertStake).div(10**30);\\n        if (quoteVarsInfo[_rentNft][_nftId].verified == true) {\\n            _claimCollateral(_rentNft, _nftId, stake);\\n        }\\n    }\\n\\n    function GetStakeBack(address _rentNft, uint256 _nftId) external OnlyExpert(msg.sender) {\\n        bytes32 NFTRentLineHash = NFTtoHash[_rentNft][_nftId];\\n        require(NFTRentLineInfo[NFTRentLineHash].exists, 'The NFT rent line does not exist');\\n        require(NFTRentLineInfo[NFTRentLineHash].currentStatus == NFTRentLineStatus.CLOSED, 'Rent not closed');\\n        uint256 stake = quoteVarsInfo[_rentNft][_nftId].collateralAmount.mul(expertStake).div(10**30);\\n        if (quoteVarsInfo[_rentNft][_nftId].verified == true) {\\n            _claimCollateral(_rentNft, _nftId, stake);\\n        }\\n    }\\n}\",\"keccak256\":\"0x88f242f9ca841dbb9004f1b246618bd1247fa2f377d6c2b932c3b2358364182a\"},\"contracts/NFTRentStorage.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract NFTRentStorage is OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    enum NFTRentLineStatus {\\n        NOT_CREATED,\\n        REQUESTED,\\n        ACTIVE,\\n        CLOSED,\\n        CANCELLED,\\n        DEFAULTED\\n    }\\n\\n    enum QuoteStatus {\\n        REQUESTED,\\n        ACCEPTED,\\n        REJECTED,\\n        FIXED\\n    }\\n\\n    uint256 public NFTRentLineCounter;\\n    uint256 public constant yearInSeconds = 365 days;\\n    uint256 public feeFraction = 10;\\n    uint256 public stakeFraction = 50;\\n    uint256 public liquidation = 20;\\n    uint256 public expertFee = feeFraction.mul(10**28);\\n    uint256 public expertStake = stakeFraction.mul(10**28);\\n    uint256 public liquidationThreshold = liquidation.mul(10**30);\\n\\n    struct QuoteVars {\\n        address NFTRent;\\n        uint256 NFTId;\\n        address NFTOwner;\\n        uint256 maxRentalDuration;\\n        uint256 dailyRentalPrice;\\n        uint256 repayInterval;\\n        address collateralAsset;\\n        uint256 collateralAmount;\\n        address expert;\\n        bool verified;\\n        QuoteStatus quoteStatus;\\n        bool Toescrow;\\n        bool Towallet;\\n    }\\n\\n    struct NFTRentLineUsageVars {\\n        uint256 repayments;\\n        uint256 withdrawInterval;\\n        uint256 repaymentInterval;\\n        uint256 repaymentsCompleted;\\n        uint256 _rentalPrice;\\n        uint256 loanStartTime;\\n        uint256 lastRepaymentTime;\\n    }\\n\\n    struct NFTRentLineVars {\\n        bool exists;\\n        address lender;\\n        address borrower;\\n        uint256 rentalPrice;\\n        address NftAsset;\\n        uint256 NftId;\\n        address collateralAsset;\\n        NFTRentLineStatus currentStatus;\\n    }\\n    mapping(bytes32 => NFTRentLineUsageVars) public NFTRentLineUsage;\\n    mapping(bytes32 => NFTRentLineVars) public NFTRentLineInfo;\\n    mapping(address => mapping(uint256 => QuoteVars)) public quoteVarsInfo;\\n}\",\"keccak256\":\"0x8f78d8c02f614272e6c863abdc7511c6428214d7ace3047900389b1e04f4164e\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061020f5760003560e01c80637957836e11610118578063c2297c27116100a0578063e99fb9ac1161006f578063e99fb9ac14610968578063eeb6f233146109ca578063f27c292e14610a72578063f2dfbf6614610ab7578063f2fde38b14610acc5761020f565b8063c2297c2714610814578063cd1351d51461086f578063cf338821146108a2578063d802a6fd1461092f5761020f565b8063a1bfe1ba116100e7578063a1bfe1ba1461063f578063a28b800e14610678578063a418cac6146106b1578063a8f05101146106fe578063b2db2f51146107135761020f565b80637957836e146105355780638440f1c51461056857806389a01265146105945780638da5cb5b1461062a5761020f565b80634059d5961161019b5780635bf8eddd1161016a5780635bf8eddd146104845780635cfd95a014610499578063676d405e146104d25780636d30cccb1461050b578063715018a6146105205761020f565b80634059d596146103e05780634ffe2a8b146103f557806357a7e13d146104265780635af41713146104525761020f565b80632b64f838116101e25780632b64f8381461030a5780632c26bac71461031f5780632f59a5ce146103665780633a19deb0146103995780634031234c146103cb5761020f565b80630d7b4b3d146102145780631299c2a71461024f578063157fac8f146102aa5780632893c27e146102e3575b600080fd5b34801561022057600080fd5b5061024d6004803603604081101561023757600080fd5b506001600160a01b038135169060200135610aff565b005b34801561025b57600080fd5b5061024d600480360360e081101561027257600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a081013515159060c001351515610b55565b3480156102b657600080fd5b5061024d600480360360408110156102cd57600080fd5b506001600160a01b038135169060200135610e21565b3480156102ef57600080fd5b506102f861101f565b60408051918252519081900360200190f35b34801561031657600080fd5b506102f8611025565b34801561032b57600080fd5b5061024d6004803603608081101561034257600080fd5b506001600160a01b038135811691602081013591604082013591606001351661102b565b34801561037257600080fd5b5061024d6004803603602081101561038957600080fd5b50356001600160a01b0316611456565b61024d600480360360608110156103af57600080fd5b506001600160a01b03813516906020810135906040013561151d565b3480156103d757600080fd5b506102f86118db565b3480156103ec57600080fd5b506102f86118e1565b34801561040157600080fd5b5061040a6118e9565b604080516001600160a01b039092168252519081900360200190f35b61024d6004803603604081101561043c57600080fd5b506001600160a01b0381351690602001356118f8565b61024d6004803603606081101561046857600080fd5b506001600160a01b038135169060208101359060400135611c56565b34801561049057600080fd5b506102f8611e87565b3480156104a557600080fd5b5061024d600480360360408110156104bc57600080fd5b506001600160a01b038135169060200135611e8d565b3480156104de57600080fd5b506102f8600480360360408110156104f557600080fd5b506001600160a01b038135169060200135611fdd565b34801561051757600080fd5b506102f8611ffa565b34801561052c57600080fd5b5061024d612000565b34801561054157600080fd5b5061024d6004803603602081101561055857600080fd5b50356001600160a01b03166120be565b61024d6004803603604081101561057e57600080fd5b506001600160a01b0381351690602001356121e6565b3480156105a057600080fd5b506105be600480360360208110156105b757600080fd5b5035612589565b6040805189151581526001600160a01b03808a1660208301528881169282019290925260608101879052858216608082015260a0810185905290831660c082015260e0810182600581111561060f57fe5b60ff1681526020019850505050505050505060405180910390f35b34801561063657600080fd5b5061040a6125e4565b34801561064b57600080fd5b5061024d6004803603604081101561066257600080fd5b506001600160a01b0381351690602001356125f4565b34801561068457600080fd5b5061024d6004803603604081101561069b57600080fd5b506001600160a01b0381351690602001356128c7565b3480156106bd57600080fd5b506106ea600480360360408110156106d457600080fd5b506001600160a01b038135169060200135612ab6565b604080519115158252519081900360200190f35b34801561070a57600080fd5b506102f8612ad6565b34801561071f57600080fd5b5061074c6004803603604081101561073657600080fd5b506001600160a01b038135169060200135612adc565b604051808e6001600160a01b03166001600160a01b031681526020018d81526020018c6001600160a01b03166001600160a01b031681526020018b81526020018a8152602001898152602001886001600160a01b03166001600160a01b03168152602001878152602001866001600160a01b03166001600160a01b03168152602001851515151581526020018460038111156107e457fe5b60ff168152921515602084015250151560408083019190915251908190036060019b509950505050505050505050f35b34801561082057600080fd5b5061024d600480360360e081101561083757600080fd5b506001600160a01b03813581169160208101359160408201359160608101359091169060808101359060a08101359060c00135612b6b565b34801561087b57600080fd5b506106ea6004803603602081101561089257600080fd5b50356001600160a01b0316612f04565b3480156108ae57600080fd5b5061024d600480360360408110156108c557600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156108f057600080fd5b82018360208201111561090257600080fd5b8035906020019184600183028401116401000000008311171561092457600080fd5b509092509050612f19565b34801561093b57600080fd5b5061024d6004803603604081101561095257600080fd5b506001600160a01b038135169060200135613024565b34801561097457600080fd5b506109926004803603602081101561098b57600080fd5b503561319e565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b3480156109d657600080fd5b506109fd600480360360208110156109ed57600080fd5b50356001600160a01b03166131db565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610a37578181015183820152602001610a1f565b50505050905090810190601f168015610a645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a7e57600080fd5b5061024d60048036036080811015610a9557600080fd5b506001600160a01b038135169060208101359060408101359060600135613276565b348015610ac357600080fd5b506102f8613469565b348015610ad857600080fd5b5061024d60048036036020811015610aef57600080fd5b50356001600160a01b031661346f565b6001600160a01b03821660009081526072602090815260408220918390525260405162461bcd60e51b8152600401808060200182810382526025815260200180613fd96025913960400191505060405180910390fd5b3360008181526070602052604090205460026000196101006001841615020190911604610bb35760405162461bcd60e51b81526004018080602001828103825260298152602001806140986029913960400191505060405180910390fd5b6001600160a01b038816610c04576040805162461bcd60e51b8152602060048201526013602482015272496e76616c6964204e4654206164647265737360681b604482015290519081900360640190fd5b6001600160a01b03881660009081526071602090815260408083208a845290915290205460ff16610c7c576040805162461bcd60e51b815260206004820152601860248201527f5468652071756f746520646f6573206e6f742065786973740000000000000000604482015290519081900360640190fd5b60006001600160a01b0389166000908152606e602090815260408083208b8452909152902060080154600160a81b900460ff166003811115610cba57fe5b14610d05576040805162461bcd60e51b81526020600482015260166024820152755468652071756f74652076616c75652065786973747360501b604482015290519081900360640190fd5b8115158315151415610d485760405162461bcd60e51b81526004018080602001828103825260328152602001806141926032913960400191505060405180910390fd5b6001600160a01b0388166000818152606e602090815260408083208b8452825291829020600881018054600483018c9055600783018b90556005909201899055600160a01b336001600160a01b03199093169290921760ff60a01b19169190911760ff60b01b1916600160b01b881515021760ff60b81b1916600160b81b87151502179055815192835282018990528181018890526060820186905260808201879052517f2642d20c95a5efb3314ca259516737c56f1035334e28cc3e27a75112083f24fe9160a0908290030190a15050505050505050565b3360008181526070602052604090205460026000196101006001841615020190911604610e7f5760405162461bcd60e51b81526004018080602001828103825260298152602001806140986029913960400191505060405180910390fd5b6001600160a01b0383166000908152607260209081526040808320858452825280832054808452606d9092529091205460ff16610f03576040805162461bcd60e51b815260206004820181905260248201527f546865204e46542072656e74206c696e6520646f6573206e6f74206578697374604482015290519081900360640190fd5b60046000828152606d60205260409020600590810154600160a01b900460ff1690811115610f2d57fe5b14610f74576040805162461bcd60e51b815260206004820152601260248201527114995b9d081b9bdd0818d85b98d95b1b195960721b604482015290519081900360640190fd5b606a546001600160a01b0385166000908152606e602090815260408083208784529091528120600701549091610fcf916c0c9f2c9cd04674edea4000000091610fc3919063ffffffff61358416565b9063ffffffff6135e616565b6001600160a01b0386166000908152606e60209081526040808320888452909152902060080154909150600160a01b900460ff161515600114156110185761101885858361364d565b5050505050565b60675481565b606a5481565b6001600160a01b03841661107c576040805162461bcd60e51b8152602060048201526013602482015272496e76616c6964204e4654206164647265737360681b604482015290519081900360640190fd5b6001600160a01b038416600090815260716020908152604080832086845290915290205460ff16156110f0576040805162461bcd60e51b81526020600482015260186024820152775468652071756f746520616c72656164792065786973747360401b604482015290519081900360640190fd5b6000846001600160a01b0316636352211e856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561113657600080fd5b505afa15801561114a573d6000803e3d6000fd5b505050506040513d602081101561116057600080fd5b50519050336001600160a01b038216146111c1576040805162461bcd60e51b815260206004820152601c60248201527f4c656e646572206e6f742074686520636f7272656374206f776e657200000000604482015290519081900360640190fd5b6001600160a01b038581166000818152606e60209081526040808320898452825280832080546001600160a01b03199081168617825560018083018c9055600283018054831633179055600383018b9055600683018054988b169890921697909717905560080180546001600160b01b031916905583835260718252808320898452909152808220805460ff191690941790935582516306fdde0360e01b815292517f907d68ef74e5ecd6be58baff9d21fa31f9a3fa3d441f5c8ce4f25f7c3ae87629936306fdde03926004808301939192829003018186803b1580156112a757600080fd5b505afa1580156112bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156112e457600080fd5b810190808051604051939291908464010000000082111561130457600080fd5b90830190602082018581111561131957600080fd5b825164010000000081118282018810171561133357600080fd5b82525081516020918201929091019080838360005b83811015611360578181015183820152602001611348565b50505050905090810190601f16801561138d5780820380516001836020036101000a031916815260200191505b50604052505050868685876040518080602001866001600160a01b03166001600160a01b03168152602001858152602001846001600160a01b03166001600160a01b03168152602001838152602001828103825287818151815260200191508051906020019080838360005b838110156114115781810151838201526020016113f9565b50505050905090810190601f16801561143e5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a15050505050565b6001600160a01b038116600090815260706020526040902054600260001961010060018416150201909116046114bd5760405162461bcd60e51b815260040180806020018281038252602381526020018061404a6023913960400191505060405180910390fd5b6001600160a01b03811660009081526070602052604081206114de91613ef9565b604080516001600160a01b038316815290517f44a3cd4eb5cc5748f6169df057b1cb2ae4c383e87cd94663c430e095d4cba4249181900360200190a150565b6001600160a01b038084166000908152607260209081526040808320868452825280832054808452606d9092529091206001015490911633146115915760405162461bcd60e51b81526004018080602001828103825260258152602001806142106025913960400191505060405180910390fd5b6001600160a01b0384166000908152607260209081526040808320868452825280832054808452606d9092529091205460ff166115ff5760405162461bcd60e51b81526004018080602001828103825260218152602001806142356021913960400191505060405180910390fd5b6000818152606c602052604090206003015460011115611666576040805162461bcd60e51b815260206004820152601760248201527f416c6c2072657061796d656e74732061726520646f6e65000000000000000000604482015290519081900360640190fd5b60026000828152606d60205260409020600590810154600160a01b900460ff169081111561169057fe5b146116e2576040805162461bcd60e51b815260206004820152601960248201527f52656e74696e6720686173206e6f7420626567756e2079657400000000000000604482015290519081900360640190fd5b60006116ee8686613696565b905083811461173a576040805162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b604482015290519081900360640190fd5b6000828152606c602052604090206006810154600290910154429190611766828263ffffffff6136d216565b8311611819576000858152606c6020526040902060030154600114156117a05761179189898961372c565b61179b898961382a565b6117ab565b6117ab89898961372c565b6000858152606c602090815260409182902060038101805460001901908190554260069092019190915582516001600160a01b038d1681529182015281517f0516911bcc3a0a7412a44601057c0a0a1ec628bde049a84284bc428866534488929181900390910190a16118d0565b60056000868152606d60205260409020600590810154600160a01b900460ff169081111561184357fe5b50507f7409cb79815e2fcde95fb7b9a71f41844973d56c2677fa71c263f76d01576fa08986606d600089815260200190815260200160002060050160149054906101000a900460ff1660405180846001600160a01b03166001600160a01b031681526020018381526020018260058111156118ba57fe5b60ff168152602001935050505060405180910390a15b505050505050505050565b606b5481565b6301e1338081565b606f546001600160a01b031681565b60006001600160a01b0383166000908152606e60209081526040808320858452909152902060080154600160a81b900460ff16600381111561193657fe5b14156119735760405162461bcd60e51b81526004018080602001828103825260238152602001806141286023913960400191505060405180910390fd5b6001600160a01b038281166000908152606e60209081526040808320858452909152902060020154163314156119da5760405162461bcd60e51b81526004018080602001828103825260268152602001806142806026913960400191505060405180910390fd5b606580546001908101918290556040805160208082019490945281518082038501815290820182528051908401206001600160a01b038681166000818152607287528481208882528752848120849055838152606d8752848120805460ff191687178082556005808301805460ff60a01b198116825599840180546001600160a01b03199081163317909155868652606e8c528986208d8752909b5297909320600280820154871661010002610100600160a81b03199093169290921783556004818101549284019290925560038084018054909b169095179099550188905560068701546001600160a81b0319909616959092169490941790925591830154920154909190611aea82826135e6565b6000848152606c602052604090209081556002810182905562015180600190910155611b1c828263ffffffff6135e616565b6000848152606c6020908152604080832060038101949094556001600160a01b0389168352606e8252808320888452909152902060048082015492019190915560070154348114611b9e5760405162461bcd60e51b815260040180806020018281038252602b81526020018061406d602b913960400191505060405180910390fd5b611ba9868683613a5d565b6000848152606c60209081526040808320426005808301829055600690920155606d8352928190208301805460ff60a01b1916600160a01b9081179182905582516001600160a01b038c1681529384018990527f9823ce50a18b6698b5b9973ad2b174e7765623a6749fe7dd871be8cca4c8c5ce948b948a949290930460ff1692918201908390811115611c3957fe5b60ff168152602001935050505060405180910390a1505050505050565b3360008181526070602052604090205460026000196101006001841615020190911604611cb45760405162461bcd60e51b81526004018080602001828103825260298152602001806140986029913960400191505060405180910390fd5b6001600160a01b0384166000908152607260209081526040808320868452825280832054808452606d9092529091205460ff16611d38576040805162461bcd60e51b815260206004820181905260248201527f546865204e46542072656e74206c696e6520646f6573206e6f74206578697374604482015290519081900360640190fd5b60016000828152606d60205260409020600590810154600160a01b900460ff1690811115611d6257fe5b14611da9576040805162461bcd60e51b815260206004820152601260248201527114995b9d081b9bdd081c995c5d595cdd195960721b604482015290519081900360640190fd5b606a546001600160a01b0386166000908152606e602090815260408083208884529091528120600701549091611df8916c0c9f2c9cd04674edea4000000091610fc3919063ffffffff61358416565b6001600160a01b0387166000908152606e60209081526040808320898452909152902060080154909150600160a01b900460ff16151560011415611e7f57838114611e745760405162461bcd60e51b81526004018080602001828103825260228152602001806141ee6022913960400191505060405180910390fd5b611e7f868686613a5d565b505050505050565b60665481565b3360008181526070602052604090205460026000196101006001841615020190911604611eeb5760405162461bcd60e51b81526004018080602001828103825260298152602001806140986029913960400191505060405180910390fd5b6001600160a01b0383166000908152607260209081526040808320858452825280832054808452606d9092529091205460ff16611f6f576040805162461bcd60e51b815260206004820181905260248201527f546865204e46542072656e74206c696e6520646f6573206e6f74206578697374604482015290519081900360640190fd5b60036000828152606d60205260409020600590810154600160a01b900460ff1690811115611f9957fe5b14610f74576040805162461bcd60e51b815260206004820152600f60248201526e14995b9d081b9bdd0818db1bdcd959608a1b604482015290519081900360640190fd5b607260209081526000928352604080842090915290825290205481565b60655481565b612008613b15565b6001600160a01b03166120196125e4565b6001600160a01b031614612074576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b336000818152607060205260409020546002600019610100600184161502019091160461211c5760405162461bcd60e51b81526004018080602001828103825260298152602001806140986029913960400191505060405180910390fd5b6001600160a01b03821660009081526073602052604090205460ff161561218a576040805162461bcd60e51b815260206004820181905260248201527f54686520626f72726f77657220697320616c7265616479207665726966696564604482015290519081900360640190fd5b6001600160a01b038216600081815260736020908152604091829020805460ff19166001179055815192835290517f01172049b4a794575e07ae9f81e9d6631faf9838434887247323de8c2df804f49281900390910190a15050565b6001600160a01b038083166000908152607260209081526040808320858452825280832054808452606d90925290912054909161010090910416331461225d5760405162461bcd60e51b815260040180806020018281038252602381526020018061416f6023913960400191505060405180910390fd5b6001600160a01b0383166000908152607260209081526040808320858452825280832054808452606d9092529091205460ff166122cb5760405162461bcd60e51b81526004018080602001828103825260218152602001806142356021913960400191505060405180910390fd5b60016000828152606d60205260409020600590810154600160a01b900460ff16908111156122f557fe5b146123315760405162461bcd60e51b81526004018080602001828103825260248152602001806141046024913960400191505060405180910390fd5b6000818152606c60205260409020600581015460019091015442919061235d828263ffffffff6136d216565b83116124ea576001600160a01b0387166000908152606e60209081526040808320898452909152902060080154600160b81b900460ff16151560011415612440576000848152606d602090815260408083206001908101546001600160a01b038c8116808752606e86528487208d8852909552838620909201548351632142170760e11b8152336004820152929091166024830181905260448301829052925192949093926342842e0e92606480820193929182900301818387803b15801561242557600080fd5b505af1158015612439573d6000803e3d6000fd5b5050505050505b6000848152606d602081815260408084206005908101805460ff60a01b1916600160a11b178155606c84529482902042600690910155928252925483516001600160a01b038c1681529182018890527fcf4767466573ec9226de1c83e0c44ef78996c5f4876aee8e4cc4bb49bc2019f4938b938993600160a01b90930460ff16929182019083908111156124d057fe5b60ff168152602001935050505060405180910390a1612580565b6000848152606d60209081526040918290206005908101805460ff60a01b1916600160a21b179081905583516001600160a01b038c1681529283018890527f127334b334dba48bbab255244c480e89b00a22dca4ad126dd1916487de1b22ff938b938993600160a01b90930460ff16929091820190839081111561256a57fe5b60ff168152602001935050505060405180910390a15b50505050505050565b606d6020526000908152604090208054600182015460028301546003840154600485015460059095015460ff808616966001600160a01b036101009097048716969586169593841693909290811691600160a01b9091041688565b6033546001600160a01b03165b90565b6001600160a01b038083166000908152607260209081526040808320858452825280832054808452606d90925290912054909161010090910416331461266b5760405162461bcd60e51b815260040180806020018281038252602381526020018061416f6023913960400191505060405180910390fd5b6001600160a01b0383166000908152607260209081526040808320858452825280832054808452606d9092529091205460ff166126d95760405162461bcd60e51b81526004018080602001828103825260218152602001806142356021913960400191505060405180910390fd5b60056000828152606d60205260409020600590810154600160a01b900460ff169081111561270357fe5b14612755576040805162461bcd60e51b815260206004820152601e60248201527f5468652072656e74206973206e6f742064656661756c746564207965742e0000604482015290519081900360640190fd5b6000818152606d6020908152604080832060050154606c9092528220600381015490546001600160a01b0390921692909190612797828463ffffffff613b1916565b905060006127a58989613696565b905060006127b9828463ffffffff61358416565b6001600160a01b038b166000908152606e602090815260408083208d8452909152812060070154919250906127f4908363ffffffff6136d216565b6001600160a01b038c166000908152606e602090815260408083208e8452909152902060080154909150600160a01b900460ff1615156001141561289f57600061286a8561285e6c0c9f2c9cd04674edea40000000610fc36069548961358490919063ffffffff16565b9063ffffffff61358416565b905060006128788d8d613b76565b905061289a8261288e858463ffffffff6136d216565b9063ffffffff613b1916565b925050505b6128ba6001600160a01b03881630338463ffffffff613bc616565b5050505050505050505050565b6001600160a01b038216600090815260716020908152604080832084845290915290205460ff1661293b576040805162461bcd60e51b81526020600482015260196024820152785468652071756f746520646f6573206e6f742065786973747360381b604482015290519081900360640190fd5b6001600160a01b038281166000908152606e602090815260408083208584529091529020600201541633146129b7576040805162461bcd60e51b815260206004820152601c60248201527f4f6e6c79206c656e6465722063616e206163636570742071756f746500000000604482015290519081900360640190fd5b6001600160a01b038281166000908152606e6020908152604080832085845290915290206008015416612a31576040805162461bcd60e51b815260206004820152601e60248201527f45787065727420686173206e6f7420676976656e207468652071756f74650000604482015290519081900360640190fd5b6001600160a01b0382166000818152606e60209081526040808320858452825291829020600881018054600160a01b60ff60a81b19909116600160a81b1760ff60a01b19161790556004015482519384529083015280517fb791d9e8e11147d21baa1cd78c4adb0806ea5839b3e26a4305fa50045d3ec96d9281900390910190a15050565b607160209081526000928352604080842090915290825290205460ff1681565b60695481565b606e6020908152600092835260408084209091529082529020805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b0397881698969795861696949593949293918216929181169060ff600160a01b8204811691600160a81b8104821691600160b01b8204811691600160b81b9004168d565b6001600160a01b038716612bbc576040805162461bcd60e51b8152602060048201526013602482015272496e76616c6964204e4654206164647265737360681b604482015290519081900360640190fd5b6001600160a01b038716600090815260716020908152604080832089845290915290205460ff1615612c30576040805162461bcd60e51b81526020600482015260186024820152775468652071756f746520616c72656164792065786973747360401b604482015290519081900360640190fd5b6001600160a01b038781166000818152606e602090815260408083208b8452825280832080546001600160a01b03199081168617825560018083018e905560028301805433908416179055600383018d905560048084018c9055600584018b9055600684018054909316988d169890981790915560078201889055600890910180546001600160b01b031916600360a81b1761ffff60b01b1916600160b81b179055848452607183528184208c8552909252808320805460ff191690921790915580516306fdde0360e01b815290517f9dfe99d0d260e0d5c8d17db277bfd33d975b2c347e6eceb328e99d5b8eb970fd946306fdde03938382019390929190829003018186803b158015612d4357600080fd5b505afa158015612d57573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612d8057600080fd5b8101908080516040519392919084640100000000821115612da057600080fd5b908301906020820185811115612db557600080fd5b8251640100000000811182820188101715612dcf57600080fd5b82525081516020918201929091019080838360005b83811015612dfc578181015183820152602001612de4565b50505050905090810190601f168015612e295780820380516001836020036101000a031916815260200191505b506040525050508888878988876040518080602001886001600160a01b03166001600160a01b03168152602001878152602001866001600160a01b03166001600160a01b03168152602001858152602001848152602001838152602001828103825289818151815260200191508051906020019080838360005b83811015612ebb578181015183820152602001612ea3565b50505050905090810190601f168015612ee85780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a150505050505050565b60736020526000908152604090205460ff1681565b6001600160a01b0383166000908152607060205260409020546002600019610100600184161502019091160415612f815760405162461bcd60e51b81526004018080602001828103825260228152602001806140c16022913960400191505060405180910390fd5b6001600160a01b0383166000908152607060205260409020612fa4908383613f40565b507f30b5eb94a54f18a967aed7e72caf39194d0f0ba44ed3fed9febc2f355556115883838360405180846001600160a01b03166001600160a01b03168152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b6001600160a01b038083166000908152607260209081526040808320858452825280832054808452606d9092529091206001015490911633146130985760405162461bcd60e51b81526004018080602001828103825260258152602001806142106025913960400191505060405180910390fd5b6001600160a01b0383166000908152607260209081526040808320858452825280832054808452606d9092529091205460ff166131065760405162461bcd60e51b81526004018080602001828103825260218152602001806142356021913960400191505060405180910390fd5b60046000828152606d60205260409020600590810154600160a01b900460ff169081111561313057fe5b1461316c5760405162461bcd60e51b815260040180806020018281038252602481526020018061414b6024913960400191505060405180910390fd5b6001600160a01b0384166000908152606e6020908152604080832086845290915290206007015461101885858361364d565b606c602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b60706020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909183018282801561326e5780601f106132435761010080835404028352916020019161326e565b820191906000526020600020905b81548152906001019060200180831161325157829003601f168201915b505050505081565b6001600160a01b038416600090815260716020908152604080832086845290915290205460ff166132ea576040805162461bcd60e51b81526020600482015260196024820152785468652071756f746520646f6573206e6f742065786973747360381b604482015290519081900360640190fd5b6001600160a01b038481166000908152606e60209081526040808320878452909152902060020154163314613366576040805162461bcd60e51b815260206004820152601c60248201527f4f6e6c79206c656e6465722063616e206163636570742071756f746500000000604482015290519081900360640190fd5b6001600160a01b038481166000908152606e60209081526040808320878452909152902060080154166133e0576040805162461bcd60e51b815260206004820152601e60248201527f45787065727420686173206e6f7420676976656e207468652071756f74650000604482015290519081900360640190fd5b6001600160a01b0384166000818152606e602090815260408083208784528252918290206004810186905560078101859055600801805460ff60a81b1916600160a91b1760ff60a01b191690558151928352820184905280517f72453b8947a73e283f4cd3b93848a9166c14805b4b2ccde25a44393a21a6fbd79281900390910190a150505050565b60685481565b613477613b15565b6001600160a01b03166134886125e4565b6001600160a01b0316146134e3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166135285760405162461bcd60e51b8152600401808060200182810382526026815260200180613ffe6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b600082613593575060006135e0565b828202828482816135a057fe5b04146135dd5760405162461bcd60e51b81526004018080602001828103825260218152602001806140e36021913960400191505060405180910390fd5b90505b92915050565b600080821161363c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161364557fe5b049392505050565b6001600160a01b038084166000908152607260209081526040808320868452825280832054808452606d909252909120600501549091166110188130338663ffffffff613bc616565b6001600160a01b039091166000908152607260209081526040808320938352928152828220548252606c90522060048101546002909101540290565b6000828201838110156135dd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038381166000818152607260209081526040808320878452825280832054808452606d835281842060050154948452606e8352818420888552909252909120600801549092918216918116906001600160a01b90910460ff161515141561380f5760006137bc6c0c9f2c9cd04674edea40000000610fc36069548861358490919063ffffffff16565b905060006137d0868363ffffffff613b1916565b90506137ed6001600160a01b03851633308463ffffffff613bc616565b6138086001600160a01b03851633858563ffffffff613bc616565b5050611e7f565b611e7f6001600160a01b03831633308763ffffffff613bc616565b6001600160a01b0382166000908152607260209081526040808320848452825280832054808452606d9092529091205460ff166138985760405162461bcd60e51b81526004018080602001828103825260218152602001806142356021913960400191505060405180910390fd5b6000818152606c6020526040902060030154156138e65760405162461bcd60e51b815260040180806020018281038252602a8152602001806141c4602a913960400191505060405180910390fd5b6001600160a01b0383166000908152606e60209081526040808320858452909152902060080154600160b81b900460ff161515600114156139c3576000818152606d60209081526040808320546001600160a01b03878116808652606e8552838620888752909452828520600101548351632142170760e11b81523360048201526101009093049091166024830181905260448301829052925192949093926342842e0e92606480820193929182900301818387803b1580156139a857600080fd5b505af11580156139bc573d6000803e3d6000fd5b5050505050505b6000818152606d60209081526040918290206005908101805460ff60a01b1916600360a01b179081905583516001600160a01b03881681529283018590527fdada2cadbe023a84ca3cbfc50edffdac70618798e68b3f8d84987084eb7f82f19387938693600160a01b90930460ff169290918201908390811115613a4357fe5b60ff168152602001935050505060405180910390a1505050565b6001600160a01b0383166000908152607260209081526040808320858452825280832054808452606d9092529091205460ff16613acb5760405162461bcd60e51b81526004018080602001828103825260218152602001806142356021913960400191505060405180910390fd5b6000818152606d60205260408082206005015490516001600160a01b0390911691339185156108fc0291869190818181858888f19350505050158015611e7f573d6000803e3d6000fd5b3390565b600082821115613b70576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b606a546001600160a01b0383166000908152606e602090815260408083208584529091528120600701549091613bbf916c0c9f2c9cd04674edea4000000091610fc39190613584565b9392505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052613c20908590613c26565b50505050565b6060613c7b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613cdc9092919063ffffffff16565b805190915015613cd757808060200190516020811015613c9a57600080fd5b5051613cd75760405162461bcd60e51b815260040180806020018281038252602a815260200180614256602a913960400191505060405180910390fd5b505050565b6060613ceb8484600085613cf3565b949350505050565b606082471015613d345760405162461bcd60e51b81526004018080602001828103825260268152602001806140246026913960400191505060405180910390fd5b613d3d85613e4f565b613d8e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613dcd5780518252601f199092019160209182019101613dae565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613e2f576040519150601f19603f3d011682016040523d82523d6000602084013e613e34565b606091505b5091509150613e44828286613e55565b979650505050505050565b3b151590565b60608315613e64575081613bbf565b825115613e745782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613ebe578181015183820152602001613ea6565b50505050905090810190601f168015613eeb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50805460018160011615610100020316600290046000825580601f10613f1f5750613f3d565b601f016020900490600052602060002090810190613f3d9190613fbe565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613f815782800160ff19823516178555613fae565b82800160010185558215613fae579182015b82811115613fae578235825591602001919060010190613f93565b50613fba929150613fbe565b5090565b6125f191905b80821115613fba5760008155600101613fc456fe54686520726571756573746564204e465420696e2063757272656e746c792072656e7465644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4164644578706572743a20566572696669657220646f6573206e6f7420657869737473506c65617365206465706f73697420636f727265637420616d6f756e74206f6620636f6c6c61746572616c5468652045787065727420616c6f6e652063616e2061636365737320746869732066756e6374696f6e4164644578706572743a20566572696669657220616c726561647920657869737473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775468652052656e7420686173206e6f74206265656e20726571756573746564207965742e5468652071756f746520686173206e6f74206265656e207265636569766564207965745468652052656e7420686173206e6f74206265656e2063616e63656c6c6564207965742e4f6e6c79204e465452656e74206c696e65204c656e6465722063616e20616363657373426f746820657363726f7720616e642077616c6c65742063616e6e6f742062652073657420746f2073616d652076616c7565506c6561736520636f6d706c6574652072656d61696e696e672072657061796d656e747320666972737454686520616d6f756e742070726f7669646564206973206e6f7420636f72726563744f6e6c79204e465452656e74206c696e6520426f72726f7765722063616e20616363657373546865204e46542072656e74206973206e6f7420796574207265717565737465645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644c656e64657220616e6420626f72726f7765722063616e6e6f74206265207468652073616d65a264697066735822122034aa7df73a93e20db30f4548592c2b08982d7027f749540ccec4d74f715cc71364736f6c63430006070033",
  "devdoc": {
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 136,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 138,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 482,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6427,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "NFTRentLineCounter",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 6433,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "feeFraction",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 6436,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "stakeFraction",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 6439,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "liquidation",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 6447,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "expertFee",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 6455,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "expertStake",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 6463,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "liquidationThreshold",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 6526,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "NFTRentLineUsage",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_bytes32,t_struct(NFTRentLineUsageVars)6505_storage)"
      },
      {
        "astId": 6530,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "NFTRentLineInfo",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_bytes32,t_struct(NFTRentLineVars)6522_storage)"
      },
      {
        "astId": 6536,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "quoteVarsInfo",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(QuoteVars)6490_storage))"
      },
      {
        "astId": 4056,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "verification",
        "offset": 0,
        "slot": "111",
        "type": "t_contract(IVerification)4033"
      },
      {
        "astId": 4060,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "expertData",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 4066,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "quotes",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4072,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "NFTtoHash",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))"
      },
      {
        "astId": 4076,
        "contract": "contracts/NFTRent.sol:NFTRent",
        "label": "VerifiedBorrowers",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVerification)4033": {
        "encoding": "inplace",
        "label": "contract IVerification",
        "numberOfBytes": "20"
      },
      "t_enum(NFTRentLineStatus)6420": {
        "encoding": "inplace",
        "label": "enum NFTRentStorage.NFTRentLineStatus",
        "numberOfBytes": "1"
      },
      "t_enum(QuoteStatus)6425": {
        "encoding": "inplace",
        "label": "enum NFTRentStorage.QuoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes32)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(QuoteVars)6490_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NFTRentStorage.QuoteVars))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(QuoteVars)6490_storage)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(NFTRentLineUsageVars)6505_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct NFTRentStorage.NFTRentLineUsageVars)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTRentLineUsageVars)6505_storage"
      },
      "t_mapping(t_bytes32,t_struct(NFTRentLineVars)6522_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct NFTRentStorage.NFTRentLineVars)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTRentLineVars)6522_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(QuoteVars)6490_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTRentStorage.QuoteVars)",
        "numberOfBytes": "32",
        "value": "t_struct(QuoteVars)6490_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NFTRentLineUsageVars)6505_storage": {
        "encoding": "inplace",
        "label": "struct NFTRentStorage.NFTRentLineUsageVars",
        "members": [
          {
            "astId": 6492,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "repayments",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6494,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "withdrawInterval",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6496,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "repaymentInterval",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6498,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "repaymentsCompleted",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6500,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "_rentalPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6502,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "loanStartTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6504,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "lastRepaymentTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(NFTRentLineVars)6522_storage": {
        "encoding": "inplace",
        "label": "struct NFTRentStorage.NFTRentLineVars",
        "members": [
          {
            "astId": 6507,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6509,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "lender",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6511,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "borrower",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6513,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "rentalPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6515,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "NftAsset",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6517,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "NftId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6519,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "collateralAsset",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 6521,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "currentStatus",
            "offset": 20,
            "slot": "5",
            "type": "t_enum(NFTRentLineStatus)6420"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(QuoteVars)6490_storage": {
        "encoding": "inplace",
        "label": "struct NFTRentStorage.QuoteVars",
        "members": [
          {
            "astId": 6465,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "NFTRent",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6467,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "NFTId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6469,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "NFTOwner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6471,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "maxRentalDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6473,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "dailyRentalPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6475,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "repayInterval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6477,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "collateralAsset",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 6479,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6481,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "expert",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 6483,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "verified",
            "offset": 20,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 6485,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "quoteStatus",
            "offset": 21,
            "slot": "8",
            "type": "t_enum(QuoteStatus)6425"
          },
          {
            "astId": 6487,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "Toescrow",
            "offset": 22,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 6489,
            "contract": "contracts/NFTRent.sol:NFTRent",
            "label": "Towallet",
            "offset": 23,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}